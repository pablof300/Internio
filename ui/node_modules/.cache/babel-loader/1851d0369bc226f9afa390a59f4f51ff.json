{"ast":null,"code":"/* tslint:disable */\n\n/* eslint-disable */\n\n/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport * as runtime from '../runtime';\nimport { InternshipInfoFromJSON, NeighborhoodFromJSON, UserFromJSON } from '../models';\n\n/**\n * no description\n */\nexport class InternioApi extends runtime.BaseAPI {\n  /**\n   * Adding an internship to a User\n   */\n  async addInternshipToUserRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.locationCity !== undefined) {\n      queryParameters['locationCity'] = requestParameters.locationCity;\n    }\n\n    if (requestParameters.locationState !== undefined) {\n      queryParameters['locationState'] = requestParameters.locationState;\n    }\n\n    if (requestParameters.startDate !== undefined) {\n      queryParameters['startDate'] = requestParameters.startDate;\n    }\n\n    if (requestParameters.endDate !== undefined) {\n      queryParameters['endDate'] = requestParameters.endDate;\n    }\n\n    if (requestParameters.company !== undefined) {\n      queryParameters['company'] = requestParameters.company;\n    }\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/addInternship`,\n      method: 'POST',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.JSONApiResponse(response, jsonValue => InternshipInfoFromJSON(jsonValue));\n  }\n  /**\n   * Adding an internship to a User\n   */\n\n\n  async addInternshipToUser(requestParameters) {\n    const response = await this.addInternshipToUserRaw(requestParameters);\n    return await response.value();\n  }\n  /**\n   * Adding a Neighborhood to an Internship\n   */\n\n\n  async addNeighborhoodToInternshipRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.neighborhoodName !== undefined) {\n      queryParameters['neighborhoodName'] = requestParameters.neighborhoodName;\n    }\n\n    if (requestParameters.city !== undefined) {\n      queryParameters['city'] = requestParameters.city;\n    }\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/addNeighborhoodToInternship`,\n      method: 'POST',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * Adding a Neighborhood to an Internship\n   */\n\n\n  async addNeighborhoodToInternship(requestParameters) {\n    await this.addNeighborhoodToInternshipRaw(requestParameters);\n  }\n  /**\n   * Update preferences\n   */\n\n\n  async addUserPrefrencesRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    if (requestParameters.q1Response !== undefined) {\n      queryParameters['Q1 Response'] = requestParameters.q1Response;\n    }\n\n    if (requestParameters.q2Response !== undefined) {\n      queryParameters['Q2 Response'] = requestParameters.q2Response;\n    }\n\n    if (requestParameters.q3Response !== undefined) {\n      queryParameters['Q3 Response'] = requestParameters.q3Response;\n    }\n\n    if (requestParameters.q4Response !== undefined) {\n      queryParameters['Q4 Response'] = requestParameters.q4Response;\n    }\n\n    if (requestParameters.q5Response !== undefined) {\n      queryParameters['Q5 Response'] = requestParameters.q5Response;\n    }\n\n    if (requestParameters.q6Response !== undefined) {\n      queryParameters['Q6 Response'] = requestParameters.q6Response;\n    }\n\n    if (requestParameters.q7Response !== undefined) {\n      queryParameters['Q7 Response'] = requestParameters.q7Response;\n    }\n\n    if (requestParameters.q8Response !== undefined) {\n      queryParameters['Q8 Response'] = requestParameters.q8Response;\n    }\n\n    if (requestParameters.q9Response !== undefined) {\n      queryParameters['Q9 Response'] = requestParameters.q9Response;\n    }\n\n    if (requestParameters.q10Response !== undefined) {\n      queryParameters['Q10 Response'] = requestParameters.q10Response;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/updatepreferences`,\n      method: 'GET',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * Update preferences\n   */\n\n\n  async addUserPrefrences(requestParameters) {\n    await this.addUserPrefrencesRaw(requestParameters);\n  }\n  /**\n   * Create Ultimate user\n   */\n\n\n  async createFullUserRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    if (requestParameters.firstname !== undefined) {\n      queryParameters['firstname'] = requestParameters.firstname;\n    }\n\n    if (requestParameters.lastname !== undefined) {\n      queryParameters['lastname'] = requestParameters.lastname;\n    }\n\n    if (requestParameters.email !== undefined) {\n      queryParameters['email'] = requestParameters.email;\n    }\n\n    if (requestParameters.password !== undefined) {\n      queryParameters['password'] = requestParameters.password;\n    }\n\n    if (requestParameters.age !== undefined) {\n      queryParameters['age'] = requestParameters.age;\n    }\n\n    if (requestParameters.q1 !== undefined) {\n      queryParameters['Q1'] = requestParameters.q1;\n    }\n\n    if (requestParameters.q2 !== undefined) {\n      queryParameters['Q2'] = requestParameters.q2;\n    }\n\n    if (requestParameters.q3 !== undefined) {\n      queryParameters['Q3'] = requestParameters.q3;\n    }\n\n    if (requestParameters.q4 !== undefined) {\n      queryParameters['Q4'] = requestParameters.q4;\n    }\n\n    if (requestParameters.q5 !== undefined) {\n      queryParameters['Q5'] = requestParameters.q5;\n    }\n\n    if (requestParameters.q6 !== undefined) {\n      queryParameters['Q6'] = requestParameters.q6;\n    }\n\n    if (requestParameters.q7 !== undefined) {\n      queryParameters['Q7'] = requestParameters.q7;\n    }\n\n    if (requestParameters.q8 !== undefined) {\n      queryParameters['Q8'] = requestParameters.q8;\n    }\n\n    if (requestParameters.q9 !== undefined) {\n      queryParameters['Q9'] = requestParameters.q9;\n    }\n\n    if (requestParameters.q10 !== undefined) {\n      queryParameters['Q10'] = requestParameters.q10;\n    }\n\n    if (requestParameters.linkedin !== undefined) {\n      queryParameters['linkedin'] = requestParameters.linkedin;\n    }\n\n    if (requestParameters.instagram !== undefined) {\n      queryParameters['instagram'] = requestParameters.instagram;\n    }\n\n    if (requestParameters.facebook !== undefined) {\n      queryParameters['facebook'] = requestParameters.facebook;\n    }\n\n    if (requestParameters.bio !== undefined) {\n      queryParameters['bio'] = requestParameters.bio;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/createFullUser`,\n      method: 'POST',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * Create Ultimate user\n   */\n\n\n  async createFullUser(requestParameters) {\n    await this.createFullUserRaw(requestParameters);\n  }\n  /**\n   * Create user\n   */\n\n\n  async createUserRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    if (requestParameters.password !== undefined) {\n      queryParameters['password'] = requestParameters.password;\n    }\n\n    if (requestParameters.email !== undefined) {\n      queryParameters['email'] = requestParameters.email;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/createuser`,\n      method: 'POST',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * Create user\n   */\n\n\n  async createUser(requestParameters) {\n    await this.createUserRaw(requestParameters);\n  }\n  /**\n   * getting list of neighborhoods in a city\n   */\n\n\n  async getNeighborhoodsRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.locationCity !== undefined) {\n      queryParameters['locationCity'] = requestParameters.locationCity;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/getneighborhoods`,\n      method: 'GET',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(NeighborhoodFromJSON));\n  }\n  /**\n   * getting list of neighborhoods in a city\n   */\n\n\n  async getNeighborhoods(requestParameters) {\n    const response = await this.getNeighborhoodsRaw(requestParameters);\n    return await response.value();\n  }\n  /**\n   * Getting user info\n   */\n\n\n  async getUserRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/user`,\n      method: 'GET',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));\n  }\n  /**\n   * Getting user info\n   */\n\n\n  async getUser(requestParameters) {\n    const response = await this.getUserRaw(requestParameters);\n    return await response.value();\n  }\n  /**\n   * load data\n   */\n\n\n  async loadDataRaw() {\n    const queryParameters = {};\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/data`,\n      method: 'GET',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * load data\n   */\n\n\n  async loadData() {\n    await this.loadDataRaw();\n  }\n  /**\n   * Updating Facebook\n   */\n\n\n  async updateFacebookRaw(requestParameters) {\n    const queryParameters = {};\n\n    if (requestParameters.username !== undefined) {\n      queryParameters['username'] = requestParameters.username;\n    }\n\n    if (requestParameters.facebookLink !== undefined) {\n      queryParameters['facebook link'] = requestParameters.facebookLink;\n    }\n\n    const headerParameters = {};\n    const response = await this.request({\n      path: `/internio/UpdateFacebook`,\n      method: 'POST',\n      headers: headerParameters,\n      query: queryParameters\n    });\n    return new runtime.VoidApiResponse(response);\n  }\n  /**\n   * Updating Facebook\n   */\n\n\n  async updateFacebook(requestParameters) {\n    await this.updateFacebookRaw(requestParameters);\n  }\n\n}","map":{"version":3,"sources":["/Users/pabloestrada/Desktop/Internio/ui/src/api/apis/InternioApi.ts"],"names":["runtime","InternshipInfoFromJSON","NeighborhoodFromJSON","UserFromJSON","InternioApi","BaseAPI","addInternshipToUserRaw","requestParameters","queryParameters","locationCity","undefined","locationState","startDate","endDate","company","username","headerParameters","response","request","path","method","headers","query","JSONApiResponse","jsonValue","addInternshipToUser","value","addNeighborhoodToInternshipRaw","neighborhoodName","city","VoidApiResponse","addNeighborhoodToInternship","addUserPrefrencesRaw","q1Response","q2Response","q3Response","q4Response","q5Response","q6Response","q7Response","q8Response","q9Response","q10Response","addUserPrefrences","createFullUserRaw","firstname","lastname","email","password","age","q1","q2","q3","q4","q5","q6","q7","q8","q9","q10","linkedin","instagram","facebook","bio","createFullUser","createUserRaw","createUser","getNeighborhoodsRaw","map","getNeighborhoods","getUserRaw","getUser","loadDataRaw","loadData","updateFacebookRaw","facebookLink","updateFacebook"],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as runtime from '../runtime';\nimport {\n    InternshipInfo,\n    InternshipInfoFromJSON,\n    InternshipInfoToJSON,\n    Neighborhood,\n    NeighborhoodFromJSON,\n    NeighborhoodToJSON,\n    User,\n    UserFromJSON,\n    UserToJSON,\n} from '../models';\n\nexport interface AddInternshipToUserRequest {\n    locationCity?: string;\n    locationState?: string;\n    startDate?: number;\n    endDate?: number;\n    company?: string;\n    username?: string;\n}\n\nexport interface AddNeighborhoodToInternshipRequest {\n    neighborhoodName?: string;\n    city?: string;\n    username?: string;\n}\n\nexport interface AddUserPrefrencesRequest {\n    username?: string;\n    q1Response?: number;\n    q2Response?: number;\n    q3Response?: number;\n    q4Response?: number;\n    q5Response?: number;\n    q6Response?: number;\n    q7Response?: number;\n    q8Response?: number;\n    q9Response?: number;\n    q10Response?: number;\n}\n\nexport interface CreateFullUserRequest {\n    username?: string;\n    firstname?: string;\n    lastname?: string;\n    email?: string;\n    password?: string;\n    age?: number;\n    q1?: number;\n    q2?: number;\n    q3?: number;\n    q4?: number;\n    q5?: number;\n    q6?: number;\n    q7?: number;\n    q8?: number;\n    q9?: number;\n    q10?: number;\n    linkedin?: string;\n    instagram?: string;\n    facebook?: string;\n    bio?: string;\n}\n\nexport interface CreateUserRequest {\n    username?: string;\n    password?: string;\n    email?: string;\n}\n\nexport interface GetNeighborhoodsRequest {\n    locationCity?: string;\n}\n\nexport interface GetUserRequest {\n    username?: string;\n}\n\nexport interface UpdateFacebookRequest {\n    username?: string;\n    facebookLink?: string;\n}\n\n/**\n * no description\n */\nexport class InternioApi extends runtime.BaseAPI {\n\n    /**\n     * Adding an internship to a User\n     */\n    async addInternshipToUserRaw(requestParameters: AddInternshipToUserRequest): Promise<runtime.ApiResponse<InternshipInfo>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.locationCity !== undefined) {\n            queryParameters['locationCity'] = requestParameters.locationCity;\n        }\n\n        if (requestParameters.locationState !== undefined) {\n            queryParameters['locationState'] = requestParameters.locationState;\n        }\n\n        if (requestParameters.startDate !== undefined) {\n            queryParameters['startDate'] = requestParameters.startDate;\n        }\n\n        if (requestParameters.endDate !== undefined) {\n            queryParameters['endDate'] = requestParameters.endDate;\n        }\n\n        if (requestParameters.company !== undefined) {\n            queryParameters['company'] = requestParameters.company;\n        }\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/addInternship`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => InternshipInfoFromJSON(jsonValue));\n    }\n\n    /**\n     * Adding an internship to a User\n     */\n    async addInternshipToUser(requestParameters: AddInternshipToUserRequest): Promise<InternshipInfo> {\n        const response = await this.addInternshipToUserRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Adding a Neighborhood to an Internship\n     */\n    async addNeighborhoodToInternshipRaw(requestParameters: AddNeighborhoodToInternshipRequest): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.neighborhoodName !== undefined) {\n            queryParameters['neighborhoodName'] = requestParameters.neighborhoodName;\n        }\n\n        if (requestParameters.city !== undefined) {\n            queryParameters['city'] = requestParameters.city;\n        }\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/addNeighborhoodToInternship`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * Adding a Neighborhood to an Internship\n     */\n    async addNeighborhoodToInternship(requestParameters: AddNeighborhoodToInternshipRequest): Promise<void> {\n        await this.addNeighborhoodToInternshipRaw(requestParameters);\n    }\n\n    /**\n     * Update preferences\n     */\n    async addUserPrefrencesRaw(requestParameters: AddUserPrefrencesRequest): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        if (requestParameters.q1Response !== undefined) {\n            queryParameters['Q1 Response'] = requestParameters.q1Response;\n        }\n\n        if (requestParameters.q2Response !== undefined) {\n            queryParameters['Q2 Response'] = requestParameters.q2Response;\n        }\n\n        if (requestParameters.q3Response !== undefined) {\n            queryParameters['Q3 Response'] = requestParameters.q3Response;\n        }\n\n        if (requestParameters.q4Response !== undefined) {\n            queryParameters['Q4 Response'] = requestParameters.q4Response;\n        }\n\n        if (requestParameters.q5Response !== undefined) {\n            queryParameters['Q5 Response'] = requestParameters.q5Response;\n        }\n\n        if (requestParameters.q6Response !== undefined) {\n            queryParameters['Q6 Response'] = requestParameters.q6Response;\n        }\n\n        if (requestParameters.q7Response !== undefined) {\n            queryParameters['Q7 Response'] = requestParameters.q7Response;\n        }\n\n        if (requestParameters.q8Response !== undefined) {\n            queryParameters['Q8 Response'] = requestParameters.q8Response;\n        }\n\n        if (requestParameters.q9Response !== undefined) {\n            queryParameters['Q9 Response'] = requestParameters.q9Response;\n        }\n\n        if (requestParameters.q10Response !== undefined) {\n            queryParameters['Q10 Response'] = requestParameters.q10Response;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/updatepreferences`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * Update preferences\n     */\n    async addUserPrefrences(requestParameters: AddUserPrefrencesRequest): Promise<void> {\n        await this.addUserPrefrencesRaw(requestParameters);\n    }\n\n    /**\n     * Create Ultimate user\n     */\n    async createFullUserRaw(requestParameters: CreateFullUserRequest): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        if (requestParameters.firstname !== undefined) {\n            queryParameters['firstname'] = requestParameters.firstname;\n        }\n\n        if (requestParameters.lastname !== undefined) {\n            queryParameters['lastname'] = requestParameters.lastname;\n        }\n\n        if (requestParameters.email !== undefined) {\n            queryParameters['email'] = requestParameters.email;\n        }\n\n        if (requestParameters.password !== undefined) {\n            queryParameters['password'] = requestParameters.password;\n        }\n\n        if (requestParameters.age !== undefined) {\n            queryParameters['age'] = requestParameters.age;\n        }\n\n        if (requestParameters.q1 !== undefined) {\n            queryParameters['Q1'] = requestParameters.q1;\n        }\n\n        if (requestParameters.q2 !== undefined) {\n            queryParameters['Q2'] = requestParameters.q2;\n        }\n\n        if (requestParameters.q3 !== undefined) {\n            queryParameters['Q3'] = requestParameters.q3;\n        }\n\n        if (requestParameters.q4 !== undefined) {\n            queryParameters['Q4'] = requestParameters.q4;\n        }\n\n        if (requestParameters.q5 !== undefined) {\n            queryParameters['Q5'] = requestParameters.q5;\n        }\n\n        if (requestParameters.q6 !== undefined) {\n            queryParameters['Q6'] = requestParameters.q6;\n        }\n\n        if (requestParameters.q7 !== undefined) {\n            queryParameters['Q7'] = requestParameters.q7;\n        }\n\n        if (requestParameters.q8 !== undefined) {\n            queryParameters['Q8'] = requestParameters.q8;\n        }\n\n        if (requestParameters.q9 !== undefined) {\n            queryParameters['Q9'] = requestParameters.q9;\n        }\n\n        if (requestParameters.q10 !== undefined) {\n            queryParameters['Q10'] = requestParameters.q10;\n        }\n\n        if (requestParameters.linkedin !== undefined) {\n            queryParameters['linkedin'] = requestParameters.linkedin;\n        }\n\n        if (requestParameters.instagram !== undefined) {\n            queryParameters['instagram'] = requestParameters.instagram;\n        }\n\n        if (requestParameters.facebook !== undefined) {\n            queryParameters['facebook'] = requestParameters.facebook;\n        }\n\n        if (requestParameters.bio !== undefined) {\n            queryParameters['bio'] = requestParameters.bio;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/createFullUser`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * Create Ultimate user\n     */\n    async createFullUser(requestParameters: CreateFullUserRequest): Promise<void> {\n        await this.createFullUserRaw(requestParameters);\n    }\n\n    /**\n     * Create user\n     */\n    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        if (requestParameters.password !== undefined) {\n            queryParameters['password'] = requestParameters.password;\n        }\n\n        if (requestParameters.email !== undefined) {\n            queryParameters['email'] = requestParameters.email;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/createuser`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * Create user\n     */\n    async createUser(requestParameters: CreateUserRequest): Promise<void> {\n        await this.createUserRaw(requestParameters);\n    }\n\n    /**\n     * getting list of neighborhoods in a city\n     */\n    async getNeighborhoodsRaw(requestParameters: GetNeighborhoodsRequest): Promise<runtime.ApiResponse<Array<Neighborhood>>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.locationCity !== undefined) {\n            queryParameters['locationCity'] = requestParameters.locationCity;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/getneighborhoods`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NeighborhoodFromJSON));\n    }\n\n    /**\n     * getting list of neighborhoods in a city\n     */\n    async getNeighborhoods(requestParameters: GetNeighborhoodsRequest): Promise<Array<Neighborhood>> {\n        const response = await this.getNeighborhoodsRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Getting user info\n     */\n    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<User>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/user`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));\n    }\n\n    /**\n     * Getting user info\n     */\n    async getUser(requestParameters: GetUserRequest): Promise<User> {\n        const response = await this.getUserRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * load data\n     */\n    async loadDataRaw(): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/data`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * load data\n     */\n    async loadData(): Promise<void> {\n        await this.loadDataRaw();\n    }\n\n    /**\n     * Updating Facebook\n     */\n    async updateFacebookRaw(requestParameters: UpdateFacebookRequest): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: runtime.HTTPQuery = {};\n\n        if (requestParameters.username !== undefined) {\n            queryParameters['username'] = requestParameters.username;\n        }\n\n        if (requestParameters.facebookLink !== undefined) {\n            queryParameters['facebook link'] = requestParameters.facebookLink;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/internio/UpdateFacebook`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     * Updating Facebook\n     */\n    async updateFacebook(requestParameters: UpdateFacebookRequest): Promise<void> {\n        await this.updateFacebookRaw(requestParameters);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}